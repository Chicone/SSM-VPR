import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F
import math

#This file is based on the file .py obtained using mmconvert on the caffemodel file provided in https://awesomeopensource.com/project/CSAILVision/places365
# Command:  mmconvert -sf caffe -in googlenet_places365.prototxt -iw googlenet_places365.caffemodel -df pytorch -om ./googlenet_places365.pth

__weights_dict = dict()

def load_weights(weight_file):
    if weight_file == None:
        return

    try:
        weights_dict = np.load(weight_file, allow_pickle=True).item()
    except:
        weights_dict = np.load(weight_file, allow_pickle=True, encoding='bytes').item()

    return weights_dict


class GoogLeNetModel(nn.Module):

    def __init__(self, weight_file):
        super(GoogLeNetModel, self).__init__()
        self.weights_dict = load_weights(weight_file)

        self.conv1_7x7_s2 = self.__conv(2, name='conv1/7x7_s2', in_channels=3, out_channels=64, kernel_size=(7, 7), stride=(2, 2), groups=1, bias=True)
        self.conv2_3x3_reduce = self.__conv(2, name='conv2/3x3_reduce', in_channels=64, out_channels=64, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.conv2_3x3 = self.__conv(2, name='conv2/3x3', in_channels=64, out_channels=192, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.inception_3a_1x1 = self.__conv(2, name='inception_3a/1x1', in_channels=192, out_channels=64, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_3a_3x3_reduce = self.__conv(2, name='inception_3a/3x3_reduce', in_channels=192, out_channels=96, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_3a_5x5_reduce = self.__conv(2, name='inception_3a/5x5_reduce', in_channels=192, out_channels=16, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_3a_pool_proj = self.__conv(2, name='inception_3a/pool_proj', in_channels=192, out_channels=32, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_3a_3x3 = self.__conv(2, name='inception_3a/3x3', in_channels=96, out_channels=128, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.inception_3a_5x5 = self.__conv(2, name='inception_3a/5x5', in_channels=16, out_channels=32, kernel_size=(5, 5), stride=(1, 1), groups=1, bias=True)
        self.inception_3b_1x1 = self.__conv(2, name='inception_3b/1x1', in_channels=256, out_channels=128, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_3b_3x3_reduce = self.__conv(2, name='inception_3b/3x3_reduce', in_channels=256, out_channels=128, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_3b_5x5_reduce = self.__conv(2, name='inception_3b/5x5_reduce', in_channels=256, out_channels=32, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_3b_pool_proj = self.__conv(2, name='inception_3b/pool_proj', in_channels=256, out_channels=64, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_3b_3x3 = self.__conv(2, name='inception_3b/3x3', in_channels=128, out_channels=192, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.inception_3b_5x5 = self.__conv(2, name='inception_3b/5x5', in_channels=32, out_channels=96, kernel_size=(5, 5), stride=(1, 1), groups=1, bias=True)
        self.inception_4a_1x1 = self.__conv(2, name='inception_4a/1x1', in_channels=480, out_channels=192, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_4a_3x3_reduce = self.__conv(2, name='inception_4a/3x3_reduce', in_channels=480, out_channels=96, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_4a_5x5_reduce = self.__conv(2, name='inception_4a/5x5_reduce', in_channels=480, out_channels=16, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_4a_pool_proj = self.__conv(2, name='inception_4a/pool_proj', in_channels=480, out_channels=64, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_4a_3x3 = self.__conv(2, name='inception_4a/3x3', in_channels=96, out_channels=208, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.inception_4a_5x5 = self.__conv(2, name='inception_4a/5x5', in_channels=16, out_channels=48, kernel_size=(5, 5), stride=(1, 1), groups=1, bias=True)
        self.inception_4b_1x1 = self.__conv(2, name='inception_4b/1x1', in_channels=512, out_channels=160, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_4b_3x3_reduce = self.__conv(2, name='inception_4b/3x3_reduce', in_channels=512, out_channels=112, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_4b_5x5_reduce = self.__conv(2, name='inception_4b/5x5_reduce', in_channels=512, out_channels=24, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_4b_pool_proj = self.__conv(2, name='inception_4b/pool_proj', in_channels=512, out_channels=64, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_4b_3x3 = self.__conv(2, name='inception_4b/3x3', in_channels=112, out_channels=224, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.inception_4b_5x5 = self.__conv(2, name='inception_4b/5x5', in_channels=24, out_channels=64, kernel_size=(5, 5), stride=(1, 1), groups=1, bias=True)
        self.inception_4c_1x1 = self.__conv(2, name='inception_4c/1x1', in_channels=512, out_channels=128, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_4c_3x3_reduce = self.__conv(2, name='inception_4c/3x3_reduce', in_channels=512, out_channels=128, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_4c_5x5_reduce = self.__conv(2, name='inception_4c/5x5_reduce', in_channels=512, out_channels=24, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_4c_pool_proj = self.__conv(2, name='inception_4c/pool_proj', in_channels=512, out_channels=64, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_4c_3x3 = self.__conv(2, name='inception_4c/3x3', in_channels=128, out_channels=256, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.inception_4c_5x5 = self.__conv(2, name='inception_4c/5x5', in_channels=24, out_channels=64, kernel_size=(5, 5), stride=(1, 1), groups=1, bias=True)
        self.inception_4d_1x1 = self.__conv(2, name='inception_4d/1x1', in_channels=512, out_channels=112, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_4d_3x3_reduce = self.__conv(2, name='inception_4d/3x3_reduce', in_channels=512, out_channels=144, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_4d_5x5_reduce = self.__conv(2, name='inception_4d/5x5_reduce', in_channels=512, out_channels=32, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_4d_pool_proj = self.__conv(2, name='inception_4d/pool_proj', in_channels=512, out_channels=64, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_4d_3x3 = self.__conv(2, name='inception_4d/3x3', in_channels=144, out_channels=288, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.inception_4d_5x5 = self.__conv(2, name='inception_4d/5x5', in_channels=32, out_channels=64, kernel_size=(5, 5), stride=(1, 1), groups=1, bias=True)
        self.inception_4e_1x1 = self.__conv(2, name='inception_4e/1x1', in_channels=528, out_channels=256, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_4e_3x3_reduce = self.__conv(2, name='inception_4e/3x3_reduce', in_channels=528, out_channels=160, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_4e_5x5_reduce = self.__conv(2, name='inception_4e/5x5_reduce', in_channels=528, out_channels=32, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_4e_pool_proj = self.__conv(2, name='inception_4e/pool_proj', in_channels=528, out_channels=128, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_4e_3x3 = self.__conv(2, name='inception_4e/3x3', in_channels=160, out_channels=320, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.inception_4e_5x5 = self.__conv(2, name='inception_4e/5x5', in_channels=32, out_channels=128, kernel_size=(5, 5), stride=(1, 1), groups=1, bias=True)
        self.inception_5a_1x1 = self.__conv(2, name='inception_5a/1x1', in_channels=832, out_channels=256, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_5a_3x3_reduce = self.__conv(2, name='inception_5a/3x3_reduce', in_channels=832, out_channels=160, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_5a_5x5_reduce = self.__conv(2, name='inception_5a/5x5_reduce', in_channels=832, out_channels=32, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_5a_pool_proj = self.__conv(2, name='inception_5a/pool_proj', in_channels=832, out_channels=128, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_5a_3x3 = self.__conv(2, name='inception_5a/3x3', in_channels=160, out_channels=320, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.inception_5a_5x5 = self.__conv(2, name='inception_5a/5x5', in_channels=32, out_channels=128, kernel_size=(5, 5), stride=(1, 1), groups=1, bias=True)
        self.inception_5b_1x1 = self.__conv(2, name='inception_5b/1x1', in_channels=832, out_channels=384, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_5b_3x3_reduce = self.__conv(2, name='inception_5b/3x3_reduce', in_channels=832, out_channels=192, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_5b_5x5_reduce = self.__conv(2, name='inception_5b/5x5_reduce', in_channels=832, out_channels=48, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_5b_pool_proj = self.__conv(2, name='inception_5b/pool_proj', in_channels=832, out_channels=128, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.inception_5b_3x3 = self.__conv(2, name='inception_5b/3x3', in_channels=192, out_channels=384, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.inception_5b_5x5 = self.__conv(2, name='inception_5b/5x5', in_channels=48, out_channels=128, kernel_size=(5, 5), stride=(1, 1), groups=1, bias=True)
        self.loss3_classifier_1 = self.__dense(name = 'loss3/classifier_1', in_features = 1024, out_features = 365, bias = True)

    def forward1(self, x):
        conv1_7x7_s2_pad = F.pad(x, (3, 3, 3, 3))
        conv1_7x7_s2    = self.conv1_7x7_s2(conv1_7x7_s2_pad)
        conv1_relu_7x7  = F.relu(conv1_7x7_s2)
        pool1_3x3_s2_pad = F.pad(conv1_relu_7x7, (0, 1, 0, 1), value=float('-inf'))
        pool1_3x3_s2, pool1_3x3_s2_idx = F.max_pool2d(pool1_3x3_s2_pad, kernel_size=(3, 3), stride=(2, 2), padding=0, ceil_mode=False, return_indices=True)
        pool1_norm1     = F.local_response_norm(pool1_3x3_s2, size=5, alpha=9.999999747378752e-05, beta=0.75, k=1.0)
        conv2_3x3_reduce = self.conv2_3x3_reduce(pool1_norm1)
        conv2_relu_3x3_reduce = F.relu(conv2_3x3_reduce)
        conv2_3x3_pad   = F.pad(conv2_relu_3x3_reduce, (1, 1, 1, 1))
        conv2_3x3       = self.conv2_3x3(conv2_3x3_pad)
        conv2_relu_3x3  = F.relu(conv2_3x3)
        conv2_norm2     = F.local_response_norm(conv2_relu_3x3, size=5, alpha=9.999999747378752e-05, beta=0.75, k=1.0)
        pool2_3x3_s2_pad = F.pad(conv2_norm2, (0, 1, 0, 1), value=float('-inf'))
        pool2_3x3_s2, pool2_3x3_s2_idx = F.max_pool2d(pool2_3x3_s2_pad, kernel_size=(3, 3), stride=(2, 2), padding=0, ceil_mode=False, return_indices=True)
        inception_3a_1x1 = self.inception_3a_1x1(pool2_3x3_s2)
        inception_3a_3x3_reduce = self.inception_3a_3x3_reduce(pool2_3x3_s2)
        inception_3a_5x5_reduce = self.inception_3a_5x5_reduce(pool2_3x3_s2)
        inception_3a_pool_pad = F.pad(pool2_3x3_s2, (1, 1, 1, 1), value=float('-inf'))
        inception_3a_pool, inception_3a_pool_idx = F.max_pool2d(inception_3a_pool_pad, kernel_size=(3, 3), stride=(1, 1), padding=0, ceil_mode=False, return_indices=True)
        inception_3a_relu_1x1 = F.relu(inception_3a_1x1)
        inception_3a_relu_3x3_reduce = F.relu(inception_3a_3x3_reduce)
        inception_3a_relu_5x5_reduce = F.relu(inception_3a_5x5_reduce)
        inception_3a_pool_proj = self.inception_3a_pool_proj(inception_3a_pool)
        inception_3a_3x3_pad = F.pad(inception_3a_relu_3x3_reduce, (1, 1, 1, 1))
        inception_3a_3x3 = self.inception_3a_3x3(inception_3a_3x3_pad)
        inception_3a_5x5_pad = F.pad(inception_3a_relu_5x5_reduce, (2, 2, 2, 2))
        inception_3a_5x5 = self.inception_3a_5x5(inception_3a_5x5_pad)
        inception_3a_relu_pool_proj = F.relu(inception_3a_pool_proj)
        inception_3a_relu_3x3 = F.relu(inception_3a_3x3)
        inception_3a_relu_5x5 = F.relu(inception_3a_5x5)
        inception_3a_output = torch.cat((inception_3a_relu_1x1, inception_3a_relu_3x3, inception_3a_relu_5x5, inception_3a_relu_pool_proj), 1)
        # inception_3b_1x1 = self.inception_3b_1x1(inception_3a_output)
        # inception_3b_3x3_reduce = self.inception_3b_3x3_reduce(inception_3a_output)
        # inception_3b_5x5_reduce = self.inception_3b_5x5_reduce(inception_3a_output)
        # inception_3b_pool_pad = F.pad(inception_3a_output, (1, 1, 1, 1), value=float('-inf'))
        # inception_3b_pool, inception_3b_pool_idx = F.max_pool2d(inception_3b_pool_pad, kernel_size=(3, 3), stride=(1, 1), padding=0, ceil_mode=False, return_indices=True)
        # inception_3b_relu_1x1 = F.relu(inception_3b_1x1)
        # inception_3b_relu_3x3_reduce = F.relu(inception_3b_3x3_reduce)
        # inception_3b_relu_5x5_reduce = F.relu(inception_3b_5x5_reduce)
        # inception_3b_pool_proj = self.inception_3b_pool_proj(inception_3b_pool)
        # inception_3b_3x3_pad = F.pad(inception_3b_relu_3x3_reduce, (1, 1, 1, 1))
        # inception_3b_3x3 = self.inception_3b_3x3(inception_3b_3x3_pad)
        # inception_3b_5x5_pad = F.pad(inception_3b_relu_5x5_reduce, (2, 2, 2, 2))
        # inception_3b_5x5 = self.inception_3b_5x5(inception_3b_5x5_pad)
        # inception_3b_relu_pool_proj = F.relu(inception_3b_pool_proj)
        # inception_3b_relu_3x3 = F.relu(inception_3b_3x3)
        # inception_3b_relu_5x5 = F.relu(inception_3b_5x5)
        # inception_3b_output = torch.cat((inception_3b_relu_1x1, inception_3b_relu_3x3, inception_3b_relu_5x5, inception_3b_relu_pool_proj), 1)
        # pool3_3x3_s2_pad = F.pad(inception_3b_output, (0, 1, 0, 1), value=float('-inf'))
        # pool3_3x3_s2, pool3_3x3_s2_idx = F.max_pool2d(pool3_3x3_s2_pad, kernel_size=(3, 3), stride=(2, 2), padding=0, ceil_mode=False, return_indices=True)
        # inception_4a_1x1 = self.inception_4a_1x1(pool3_3x3_s2)
        # inception_4a_3x3_reduce = self.inception_4a_3x3_reduce(pool3_3x3_s2)
        # inception_4a_5x5_reduce = self.inception_4a_5x5_reduce(pool3_3x3_s2)
        # inception_4a_pool_pad = F.pad(pool3_3x3_s2, (1, 1, 1, 1), value=float('-inf'))
        # inception_4a_pool, inception_4a_pool_idx = F.max_pool2d(inception_4a_pool_pad, kernel_size=(3, 3), stride=(1, 1), padding=0, ceil_mode=False, return_indices=True)
        # inception_4a_relu_1x1 = F.relu(inception_4a_1x1)
        # inception_4a_relu_3x3_reduce = F.relu(inception_4a_3x3_reduce)
        # inception_4a_relu_5x5_reduce = F.relu(inception_4a_5x5_reduce)
        # inception_4a_pool_proj = self.inception_4a_pool_proj(inception_4a_pool)
        # inception_4a_3x3_pad = F.pad(inception_4a_relu_3x3_reduce, (1, 1, 1, 1))
        # inception_4a_3x3 = self.inception_4a_3x3(inception_4a_3x3_pad)
        # inception_4a_5x5_pad = F.pad(inception_4a_relu_5x5_reduce, (2, 2, 2, 2))
        # inception_4a_5x5 = self.inception_4a_5x5(inception_4a_5x5_pad)
        # inception_4a_relu_pool_proj = F.relu(inception_4a_pool_proj)
        # inception_4a_relu_3x3 = F.relu(inception_4a_3x3)
        # inception_4a_relu_5x5 = F.relu(inception_4a_5x5)
        # inception_4a_output = torch.cat((inception_4a_relu_1x1, inception_4a_relu_3x3, inception_4a_relu_5x5, inception_4a_relu_pool_proj), 1)
        # inception_4b_1x1 = self.inception_4b_1x1(inception_4a_output)
        # inception_4b_3x3_reduce = self.inception_4b_3x3_reduce(inception_4a_output)
        # inception_4b_5x5_reduce = self.inception_4b_5x5_reduce(inception_4a_output)
        # inception_4b_pool_pad = F.pad(inception_4a_output, (1, 1, 1, 1), value=float('-inf'))
        # inception_4b_pool, inception_4b_pool_idx = F.max_pool2d(inception_4b_pool_pad, kernel_size=(3, 3), stride=(1, 1), padding=0, ceil_mode=False, return_indices=True)
        # inception_4b_relu_1x1 = F.relu(inception_4b_1x1)
        # inception_4b_relu_3x3_reduce = F.relu(inception_4b_3x3_reduce)
        # inception_4b_relu_5x5_reduce = F.relu(inception_4b_5x5_reduce)
        # inception_4b_pool_proj = self.inception_4b_pool_proj(inception_4b_pool)
        # inception_4b_3x3_pad = F.pad(inception_4b_relu_3x3_reduce, (1, 1, 1, 1))
        # inception_4b_3x3 = self.inception_4b_3x3(inception_4b_3x3_pad)
        # inception_4b_5x5_pad = F.pad(inception_4b_relu_5x5_reduce, (2, 2, 2, 2))
        # inception_4b_5x5 = self.inception_4b_5x5(inception_4b_5x5_pad)
        # inception_4b_relu_pool_proj = F.relu(inception_4b_pool_proj)
        # inception_4b_relu_3x3 = F.relu(inception_4b_3x3)
        # inception_4b_relu_5x5 = F.relu(inception_4b_5x5)
        # inception_4b_output = torch.cat((inception_4b_relu_1x1, inception_4b_relu_3x3, inception_4b_relu_5x5, inception_4b_relu_pool_proj), 1)
        # inception_4c_1x1 = self.inception_4c_1x1(inception_4b_output)
        # inception_4c_3x3_reduce = self.inception_4c_3x3_reduce(inception_4b_output)
        # inception_4c_5x5_reduce = self.inception_4c_5x5_reduce(inception_4b_output)
        # inception_4c_pool_pad = F.pad(inception_4b_output, (1, 1, 1, 1), value=float('-inf'))
        # inception_4c_pool, inception_4c_pool_idx = F.max_pool2d(inception_4c_pool_pad, kernel_size=(3, 3), stride=(1, 1), padding=0, ceil_mode=False, return_indices=True)
        # inception_4c_relu_1x1 = F.relu(inception_4c_1x1)
        # inception_4c_relu_3x3_reduce = F.relu(inception_4c_3x3_reduce)
        # inception_4c_relu_5x5_reduce = F.relu(inception_4c_5x5_reduce)
        # inception_4c_pool_proj = self.inception_4c_pool_proj(inception_4c_pool)
        # inception_4c_3x3_pad = F.pad(inception_4c_relu_3x3_reduce, (1, 1, 1, 1))
        # inception_4c_3x3 = self.inception_4c_3x3(inception_4c_3x3_pad)
        # inception_4c_5x5_pad = F.pad(inception_4c_relu_5x5_reduce, (2, 2, 2, 2))
        # inception_4c_5x5 = self.inception_4c_5x5(inception_4c_5x5_pad)
        # inception_4c_relu_pool_proj = F.relu(inception_4c_pool_proj)
        # inception_4c_relu_3x3 = F.relu(inception_4c_3x3)
        # inception_4c_relu_5x5 = F.relu(inception_4c_5x5)
        # inception_4c_output = torch.cat((inception_4c_relu_1x1, inception_4c_relu_3x3, inception_4c_relu_5x5, inception_4c_relu_pool_proj), 1)
        # inception_4d_1x1 = self.inception_4d_1x1(inception_4c_output)
        # inception_4d_3x3_reduce = self.inception_4d_3x3_reduce(inception_4c_output)
        # inception_4d_5x5_reduce = self.inception_4d_5x5_reduce(inception_4c_output)
        # inception_4d_pool_pad = F.pad(inception_4c_output, (1, 1, 1, 1), value=float('-inf'))
        # inception_4d_pool, inception_4d_pool_idx = F.max_pool2d(inception_4d_pool_pad, kernel_size=(3, 3), stride=(1, 1), padding=0, ceil_mode=False, return_indices=True)
        # inception_4d_relu_1x1 = F.relu(inception_4d_1x1)
        # inception_4d_relu_3x3_reduce = F.relu(inception_4d_3x3_reduce)
        # inception_4d_relu_5x5_reduce = F.relu(inception_4d_5x5_reduce)
        # inception_4d_pool_proj = self.inception_4d_pool_proj(inception_4d_pool)
        # inception_4d_3x3_pad = F.pad(inception_4d_relu_3x3_reduce, (1, 1, 1, 1))
        # inception_4d_3x3 = self.inception_4d_3x3(inception_4d_3x3_pad)
        # inception_4d_5x5_pad = F.pad(inception_4d_relu_5x5_reduce, (2, 2, 2, 2))
        # inception_4d_5x5 = self.inception_4d_5x5(inception_4d_5x5_pad)
        # inception_4d_relu_pool_proj = F.relu(inception_4d_pool_proj)
        # inception_4d_relu_3x3 = F.relu(inception_4d_3x3)
        # inception_4d_relu_5x5 = F.relu(inception_4d_5x5)
        # inception_4d_output = torch.cat((inception_4d_relu_1x1, inception_4d_relu_3x3, inception_4d_relu_5x5, inception_4d_relu_pool_proj), 1)
        # inception_4e_1x1 = self.inception_4e_1x1(inception_4d_output)
        # inception_4e_3x3_reduce = self.inception_4e_3x3_reduce(inception_4d_output)
        # inception_4e_5x5_reduce = self.inception_4e_5x5_reduce(inception_4d_output)
        # inception_4e_pool_pad = F.pad(inception_4d_output, (1, 1, 1, 1), value=float('-inf'))
        # inception_4e_pool, inception_4e_pool_idx = F.max_pool2d(inception_4e_pool_pad, kernel_size=(3, 3), stride=(1, 1), padding=0, ceil_mode=False, return_indices=True)
        # inception_4e_relu_1x1 = F.relu(inception_4e_1x1)
        # inception_4e_relu_3x3_reduce = F.relu(inception_4e_3x3_reduce)
        # inception_4e_relu_5x5_reduce = F.relu(inception_4e_5x5_reduce)
        # inception_4e_pool_proj = self.inception_4e_pool_proj(inception_4e_pool)
        # inception_4e_3x3_pad = F.pad(inception_4e_relu_3x3_reduce, (1, 1, 1, 1))
        # inception_4e_3x3 = self.inception_4e_3x3(inception_4e_3x3_pad)
        # inception_4e_5x5_pad = F.pad(inception_4e_relu_5x5_reduce, (2, 2, 2, 2))
        # inception_4e_5x5 = self.inception_4e_5x5(inception_4e_5x5_pad)
        # inception_4e_relu_pool_proj = F.relu(inception_4e_pool_proj)
        # inception_4e_relu_3x3 = F.relu(inception_4e_3x3)
        # inception_4e_relu_5x5 = F.relu(inception_4e_5x5)
        # inception_4e_output = torch.cat((inception_4e_relu_1x1, inception_4e_relu_3x3, inception_4e_relu_5x5, inception_4e_relu_pool_proj), 1)
        # pool4_3x3_s2_pad = F.pad(inception_4e_output, (0, 1, 0, 1), value=float('-inf'))
        # pool4_3x3_s2, pool4_3x3_s2_idx = F.max_pool2d(pool4_3x3_s2_pad, kernel_size=(3, 3), stride=(2, 2), padding=0, ceil_mode=False, return_indices=True)
        # inception_5a_1x1 = self.inception_5a_1x1(pool4_3x3_s2)
        # inception_5a_3x3_reduce = self.inception_5a_3x3_reduce(pool4_3x3_s2)
        # inception_5a_5x5_reduce = self.inception_5a_5x5_reduce(pool4_3x3_s2)
        # inception_5a_pool_pad = F.pad(pool4_3x3_s2, (1, 1, 1, 1), value=float('-inf'))
        # inception_5a_pool, inception_5a_pool_idx = F.max_pool2d(inception_5a_pool_pad, kernel_size=(3, 3), stride=(1, 1), padding=0, ceil_mode=False, return_indices=True)
        # inception_5a_relu_1x1 = F.relu(inception_5a_1x1)
        # inception_5a_relu_3x3_reduce = F.relu(inception_5a_3x3_reduce)
        # inception_5a_relu_5x5_reduce = F.relu(inception_5a_5x5_reduce)
        # inception_5a_pool_proj = self.inception_5a_pool_proj(inception_5a_pool)
        # inception_5a_3x3_pad = F.pad(inception_5a_relu_3x3_reduce, (1, 1, 1, 1))
        # inception_5a_3x3 = self.inception_5a_3x3(inception_5a_3x3_pad)
        # inception_5a_5x5_pad = F.pad(inception_5a_relu_5x5_reduce, (2, 2, 2, 2))
        # inception_5a_5x5 = self.inception_5a_5x5(inception_5a_5x5_pad)
        # inception_5a_relu_pool_proj = F.relu(inception_5a_pool_proj)
        # inception_5a_relu_3x3 = F.relu(inception_5a_3x3)
        # inception_5a_relu_5x5 = F.relu(inception_5a_5x5)
        # inception_5a_output = torch.cat((inception_5a_relu_1x1, inception_5a_relu_3x3, inception_5a_relu_5x5, inception_5a_relu_pool_proj), 1)
        # inception_5b_1x1 = self.inception_5b_1x1(inception_5a_output)
        # inception_5b_3x3_reduce = self.inception_5b_3x3_reduce(inception_5a_output)
        # inception_5b_5x5_reduce = self.inception_5b_5x5_reduce(inception_5a_output)
        # inception_5b_pool_pad = F.pad(inception_5a_output, (1, 1, 1, 1), value=float('-inf'))
        # inception_5b_pool, inception_5b_pool_idx = F.max_pool2d(inception_5b_pool_pad, kernel_size=(3, 3), stride=(1, 1), padding=0, ceil_mode=False, return_indices=True)
        # inception_5b_relu_1x1 = F.relu(inception_5b_1x1)
        # inception_5b_relu_3x3_reduce = F.relu(inception_5b_3x3_reduce)
        # inception_5b_relu_5x5_reduce = F.relu(inception_5b_5x5_reduce)
        # inception_5b_pool_proj = self.inception_5b_pool_proj(inception_5b_pool)
        # inception_5b_3x3_pad = F.pad(inception_5b_relu_3x3_reduce, (1, 1, 1, 1))
        # inception_5b_3x3 = self.inception_5b_3x3(inception_5b_3x3_pad)
        # inception_5b_5x5_pad = F.pad(inception_5b_relu_5x5_reduce, (2, 2, 2, 2))
        # inception_5b_5x5 = self.inception_5b_5x5(inception_5b_5x5_pad)
        # inception_5b_relu_pool_proj = F.relu(inception_5b_pool_proj)
        # inception_5b_relu_3x3 = F.relu(inception_5b_3x3)
        # inception_5b_relu_5x5 = F.relu(inception_5b_5x5)
        # inception_5b_output = torch.cat((inception_5b_relu_1x1, inception_5b_relu_3x3, inception_5b_relu_5x5, inception_5b_relu_pool_proj), 1)
        # pool5_7x7_s1    = F.avg_pool2d(inception_5b_output, kernel_size=(7, 7), stride=(1, 1), padding=(0,), ceil_mode=False, count_include_pad=False)
        # pool5_drop_7x7_s1 = F.dropout(input = pool5_7x7_s1, p = 0.4000000059604645, training = self.training, inplace = True)
        # loss3_classifier_0 = pool5_drop_7x7_s1.view(pool5_drop_7x7_s1.size(0), -1)
        # loss3_classifier_1 = self.loss3_classifier_1(loss3_classifier_0)
        # prob            = F.softmax(loss3_classifier_1)
        # return prob
        return inception_3a_output

    def forward2(self, x):
        conv1_7x7_s2_pad = F.pad(x, (3, 3, 3, 3))
        conv1_7x7_s2    = self.conv1_7x7_s2(conv1_7x7_s2_pad)
        conv1_relu_7x7  = F.relu(conv1_7x7_s2)
        pool1_3x3_s2_pad = F.pad(conv1_relu_7x7, (0, 1, 0, 1), value=float('-inf'))
        pool1_3x3_s2, pool1_3x3_s2_idx = F.max_pool2d(pool1_3x3_s2_pad, kernel_size=(3, 3), stride=(2, 2), padding=0, ceil_mode=False, return_indices=True)
        pool1_norm1     = F.local_response_norm(pool1_3x3_s2, size=5, alpha=9.999999747378752e-05, beta=0.75, k=1.0)
        conv2_3x3_reduce = self.conv2_3x3_reduce(pool1_norm1)
        conv2_relu_3x3_reduce = F.relu(conv2_3x3_reduce)
        conv2_3x3_pad   = F.pad(conv2_relu_3x3_reduce, (1, 1, 1, 1))
        conv2_3x3       = self.conv2_3x3(conv2_3x3_pad)
        conv2_relu_3x3  = F.relu(conv2_3x3)
        conv2_norm2     = F.local_response_norm(conv2_relu_3x3, size=5, alpha=9.999999747378752e-05, beta=0.75, k=1.0)
        pool2_3x3_s2_pad = F.pad(conv2_norm2, (0, 1, 0, 1), value=float('-inf'))
        pool2_3x3_s2, pool2_3x3_s2_idx = F.max_pool2d(pool2_3x3_s2_pad, kernel_size=(3, 3), stride=(2, 2), padding=0, ceil_mode=False, return_indices=True)
        inception_3a_1x1 = self.inception_3a_1x1(pool2_3x3_s2)
        inception_3a_3x3_reduce = self.inception_3a_3x3_reduce(pool2_3x3_s2)
        inception_3a_5x5_reduce = self.inception_3a_5x5_reduce(pool2_3x3_s2)
        inception_3a_pool_pad = F.pad(pool2_3x3_s2, (1, 1, 1, 1), value=float('-inf'))
        inception_3a_pool, inception_3a_pool_idx = F.max_pool2d(inception_3a_pool_pad, kernel_size=(3, 3), stride=(1, 1), padding=0, ceil_mode=False, return_indices=True)
        inception_3a_relu_1x1 = F.relu(inception_3a_1x1)
        inception_3a_relu_3x3_reduce = F.relu(inception_3a_3x3_reduce)
        inception_3a_relu_5x5_reduce = F.relu(inception_3a_5x5_reduce)
        inception_3a_pool_proj = self.inception_3a_pool_proj(inception_3a_pool)
        inception_3a_3x3_pad = F.pad(inception_3a_relu_3x3_reduce, (1, 1, 1, 1))
        inception_3a_3x3 = self.inception_3a_3x3(inception_3a_3x3_pad)
        inception_3a_5x5_pad = F.pad(inception_3a_relu_5x5_reduce, (2, 2, 2, 2))
        inception_3a_5x5 = self.inception_3a_5x5(inception_3a_5x5_pad)
        inception_3a_relu_pool_proj = F.relu(inception_3a_pool_proj)
        inception_3a_relu_3x3 = F.relu(inception_3a_3x3)
        inception_3a_relu_5x5 = F.relu(inception_3a_5x5)
        inception_3a_output = torch.cat((inception_3a_relu_1x1, inception_3a_relu_3x3, inception_3a_relu_5x5, inception_3a_relu_pool_proj), 1)
        # inception_3b_1x1 = self.inception_3b_1x1(inception_3a_output)
        # inception_3b_3x3_reduce = self.inception_3b_3x3_reduce(inception_3a_output)
        # inception_3b_5x5_reduce = self.inception_3b_5x5_reduce(inception_3a_output)
        # inception_3b_pool_pad = F.pad(inception_3a_output, (1, 1, 1, 1), value=float('-inf'))
        # inception_3b_pool, inception_3b_pool_idx = F.max_pool2d(inception_3b_pool_pad, kernel_size=(3, 3), stride=(1, 1), padding=0, ceil_mode=False, return_indices=True)
        # inception_3b_relu_1x1 = F.relu(inception_3b_1x1)
        # inception_3b_relu_3x3_reduce = F.relu(inception_3b_3x3_reduce)
        # inception_3b_relu_5x5_reduce = F.relu(inception_3b_5x5_reduce)
        # inception_3b_pool_proj = self.inception_3b_pool_proj(inception_3b_pool)
        # inception_3b_3x3_pad = F.pad(inception_3b_relu_3x3_reduce, (1, 1, 1, 1))
        # inception_3b_3x3 = self.inception_3b_3x3(inception_3b_3x3_pad)
        # inception_3b_5x5_pad = F.pad(inception_3b_relu_5x5_reduce, (2, 2, 2, 2))
        # inception_3b_5x5 = self.inception_3b_5x5(inception_3b_5x5_pad)
        # inception_3b_relu_pool_proj = F.relu(inception_3b_pool_proj)
        # inception_3b_relu_3x3 = F.relu(inception_3b_3x3)
        # inception_3b_relu_5x5 = F.relu(inception_3b_5x5)
        # inception_3b_output = torch.cat((inception_3b_relu_1x1, inception_3b_relu_3x3, inception_3b_relu_5x5, inception_3b_relu_pool_proj), 1)
        # pool3_3x3_s2_pad = F.pad(inception_3b_output, (0, 1, 0, 1), value=float('-inf'))
        # pool3_3x3_s2, pool3_3x3_s2_idx = F.max_pool2d(pool3_3x3_s2_pad, kernel_size=(3, 3), stride=(2, 2), padding=0, ceil_mode=False, return_indices=True)
        # inception_4a_1x1 = self.inception_4a_1x1(pool3_3x3_s2)
        # inception_4a_3x3_reduce = self.inception_4a_3x3_reduce(pool3_3x3_s2)
        # inception_4a_5x5_reduce = self.inception_4a_5x5_reduce(pool3_3x3_s2)
        # inception_4a_pool_pad = F.pad(pool3_3x3_s2, (1, 1, 1, 1), value=float('-inf'))
        # inception_4a_pool, inception_4a_pool_idx = F.max_pool2d(inception_4a_pool_pad, kernel_size=(3, 3), stride=(1, 1), padding=0, ceil_mode=False, return_indices=True)
        # inception_4a_relu_1x1 = F.relu(inception_4a_1x1)
        # inception_4a_relu_3x3_reduce = F.relu(inception_4a_3x3_reduce)
        # inception_4a_relu_5x5_reduce = F.relu(inception_4a_5x5_reduce)
        # inception_4a_pool_proj = self.inception_4a_pool_proj(inception_4a_pool)
        # inception_4a_3x3_pad = F.pad(inception_4a_relu_3x3_reduce, (1, 1, 1, 1))
        # inception_4a_3x3 = self.inception_4a_3x3(inception_4a_3x3_pad)
        # inception_4a_5x5_pad = F.pad(inception_4a_relu_5x5_reduce, (2, 2, 2, 2))
        # inception_4a_5x5 = self.inception_4a_5x5(inception_4a_5x5_pad)
        # inception_4a_relu_pool_proj = F.relu(inception_4a_pool_proj)
        # inception_4a_relu_3x3 = F.relu(inception_4a_3x3)
        # inception_4a_relu_5x5 = F.relu(inception_4a_5x5)
        # inception_4a_output = torch.cat((inception_4a_relu_1x1, inception_4a_relu_3x3, inception_4a_relu_5x5, inception_4a_relu_pool_proj), 1)
        # inception_4b_1x1 = self.inception_4b_1x1(inception_4a_output)
        # inception_4b_3x3_reduce = self.inception_4b_3x3_reduce(inception_4a_output)
        # inception_4b_5x5_reduce = self.inception_4b_5x5_reduce(inception_4a_output)
        # inception_4b_pool_pad = F.pad(inception_4a_output, (1, 1, 1, 1), value=float('-inf'))
        # inception_4b_pool, inception_4b_pool_idx = F.max_pool2d(inception_4b_pool_pad, kernel_size=(3, 3), stride=(1, 1), padding=0, ceil_mode=False, return_indices=True)
        # inception_4b_relu_1x1 = F.relu(inception_4b_1x1)
        # inception_4b_relu_3x3_reduce = F.relu(inception_4b_3x3_reduce)
        # inception_4b_relu_5x5_reduce = F.relu(inception_4b_5x5_reduce)
        # inception_4b_pool_proj = self.inception_4b_pool_proj(inception_4b_pool)
        # inception_4b_3x3_pad = F.pad(inception_4b_relu_3x3_reduce, (1, 1, 1, 1))
        # inception_4b_3x3 = self.inception_4b_3x3(inception_4b_3x3_pad)
        # inception_4b_5x5_pad = F.pad(inception_4b_relu_5x5_reduce, (2, 2, 2, 2))
        # inception_4b_5x5 = self.inception_4b_5x5(inception_4b_5x5_pad)
        # inception_4b_relu_pool_proj = F.relu(inception_4b_pool_proj)
        # inception_4b_relu_3x3 = F.relu(inception_4b_3x3)
        # inception_4b_relu_5x5 = F.relu(inception_4b_5x5)
        # inception_4b_output = torch.cat((inception_4b_relu_1x1, inception_4b_relu_3x3, inception_4b_relu_5x5, inception_4b_relu_pool_proj), 1)
        # inception_4c_1x1 = self.inception_4c_1x1(inception_4b_output)
        # inception_4c_3x3_reduce = self.inception_4c_3x3_reduce(inception_4b_output)
        # inception_4c_5x5_reduce = self.inception_4c_5x5_reduce(inception_4b_output)
        # inception_4c_pool_pad = F.pad(inception_4b_output, (1, 1, 1, 1), value=float('-inf'))
        # inception_4c_pool, inception_4c_pool_idx = F.max_pool2d(inception_4c_pool_pad, kernel_size=(3, 3), stride=(1, 1), padding=0, ceil_mode=False, return_indices=True)
        # inception_4c_relu_1x1 = F.relu(inception_4c_1x1)
        # inception_4c_relu_3x3_reduce = F.relu(inception_4c_3x3_reduce)
        # inception_4c_relu_5x5_reduce = F.relu(inception_4c_5x5_reduce)
        # inception_4c_pool_proj = self.inception_4c_pool_proj(inception_4c_pool)
        # inception_4c_3x3_pad = F.pad(inception_4c_relu_3x3_reduce, (1, 1, 1, 1))
        # inception_4c_3x3 = self.inception_4c_3x3(inception_4c_3x3_pad)
        # inception_4c_5x5_pad = F.pad(inception_4c_relu_5x5_reduce, (2, 2, 2, 2))
        # inception_4c_5x5 = self.inception_4c_5x5(inception_4c_5x5_pad)
        # inception_4c_relu_pool_proj = F.relu(inception_4c_pool_proj)
        # inception_4c_relu_3x3 = F.relu(inception_4c_3x3)
        # inception_4c_relu_5x5 = F.relu(inception_4c_5x5)
        # inception_4c_output = torch.cat((inception_4c_relu_1x1, inception_4c_relu_3x3, inception_4c_relu_5x5, inception_4c_relu_pool_proj), 1)
        # inception_4d_1x1 = self.inception_4d_1x1(inception_4c_output)
        # inception_4d_3x3_reduce = self.inception_4d_3x3_reduce(inception_4c_output)
        # inception_4d_5x5_reduce = self.inception_4d_5x5_reduce(inception_4c_output)
        # inception_4d_pool_pad = F.pad(inception_4c_output, (1, 1, 1, 1), value=float('-inf'))
        # inception_4d_pool, inception_4d_pool_idx = F.max_pool2d(inception_4d_pool_pad, kernel_size=(3, 3), stride=(1, 1), padding=0, ceil_mode=False, return_indices=True)
        # inception_4d_relu_1x1 = F.relu(inception_4d_1x1)
        # inception_4d_relu_3x3_reduce = F.relu(inception_4d_3x3_reduce)
        # inception_4d_relu_5x5_reduce = F.relu(inception_4d_5x5_reduce)
        # inception_4d_pool_proj = self.inception_4d_pool_proj(inception_4d_pool)
        # inception_4d_3x3_pad = F.pad(inception_4d_relu_3x3_reduce, (1, 1, 1, 1))
        # inception_4d_3x3 = self.inception_4d_3x3(inception_4d_3x3_pad)
        # inception_4d_5x5_pad = F.pad(inception_4d_relu_5x5_reduce, (2, 2, 2, 2))
        # inception_4d_5x5 = self.inception_4d_5x5(inception_4d_5x5_pad)
        # inception_4d_relu_pool_proj = F.relu(inception_4d_pool_proj)
        # inception_4d_relu_3x3 = F.relu(inception_4d_3x3)
        # inception_4d_relu_5x5 = F.relu(inception_4d_5x5)
        # inception_4d_output = torch.cat((inception_4d_relu_1x1, inception_4d_relu_3x3, inception_4d_relu_5x5, inception_4d_relu_pool_proj), 1)
        # inception_4e_1x1 = self.inception_4e_1x1(inception_4d_output)
        # inception_4e_3x3_reduce = self.inception_4e_3x3_reduce(inception_4d_output)
        # inception_4e_5x5_reduce = self.inception_4e_5x5_reduce(inception_4d_output)
        # inception_4e_pool_pad = F.pad(inception_4d_output, (1, 1, 1, 1), value=float('-inf'))
        # inception_4e_pool, inception_4e_pool_idx = F.max_pool2d(inception_4e_pool_pad, kernel_size=(3, 3), stride=(1, 1), padding=0, ceil_mode=False, return_indices=True)
        # inception_4e_relu_1x1 = F.relu(inception_4e_1x1)
        # inception_4e_relu_3x3_reduce = F.relu(inception_4e_3x3_reduce)
        # inception_4e_relu_5x5_reduce = F.relu(inception_4e_5x5_reduce)
        # inception_4e_pool_proj = self.inception_4e_pool_proj(inception_4e_pool)
        # inception_4e_3x3_pad = F.pad(inception_4e_relu_3x3_reduce, (1, 1, 1, 1))
        # inception_4e_3x3 = self.inception_4e_3x3(inception_4e_3x3_pad)
        # inception_4e_5x5_pad = F.pad(inception_4e_relu_5x5_reduce, (2, 2, 2, 2))
        # inception_4e_5x5 = self.inception_4e_5x5(inception_4e_5x5_pad)
        # inception_4e_relu_pool_proj = F.relu(inception_4e_pool_proj)
        # inception_4e_relu_3x3 = F.relu(inception_4e_3x3)
        # inception_4e_relu_5x5 = F.relu(inception_4e_5x5)
        # inception_4e_output = torch.cat((inception_4e_relu_1x1, inception_4e_relu_3x3, inception_4e_relu_5x5, inception_4e_relu_pool_proj), 1)
        # pool4_3x3_s2_pad = F.pad(inception_4e_output, (0, 1, 0, 1), value=float('-inf'))
        # pool4_3x3_s2, pool4_3x3_s2_idx = F.max_pool2d(pool4_3x3_s2_pad, kernel_size=(3, 3), stride=(2, 2), padding=0, ceil_mode=False, return_indices=True)
        # inception_5a_1x1 = self.inception_5a_1x1(pool4_3x3_s2)
        # inception_5a_3x3_reduce = self.inception_5a_3x3_reduce(pool4_3x3_s2)
        # inception_5a_5x5_reduce = self.inception_5a_5x5_reduce(pool4_3x3_s2)
        # inception_5a_pool_pad = F.pad(pool4_3x3_s2, (1, 1, 1, 1), value=float('-inf'))
        # inception_5a_pool, inception_5a_pool_idx = F.max_pool2d(inception_5a_pool_pad, kernel_size=(3, 3), stride=(1, 1), padding=0, ceil_mode=False, return_indices=True)
        # inception_5a_relu_1x1 = F.relu(inception_5a_1x1)
        # inception_5a_relu_3x3_reduce = F.relu(inception_5a_3x3_reduce)
        # inception_5a_relu_5x5_reduce = F.relu(inception_5a_5x5_reduce)
        # inception_5a_pool_proj = self.inception_5a_pool_proj(inception_5a_pool)
        # inception_5a_3x3_pad = F.pad(inception_5a_relu_3x3_reduce, (1, 1, 1, 1))
        # inception_5a_3x3 = self.inception_5a_3x3(inception_5a_3x3_pad)
        # inception_5a_5x5_pad = F.pad(inception_5a_relu_5x5_reduce, (2, 2, 2, 2))
        # inception_5a_5x5 = self.inception_5a_5x5(inception_5a_5x5_pad)
        # inception_5a_relu_pool_proj = F.relu(inception_5a_pool_proj)
        # inception_5a_relu_3x3 = F.relu(inception_5a_3x3)
        # inception_5a_relu_5x5 = F.relu(inception_5a_5x5)
        # inception_5a_output = torch.cat((inception_5a_relu_1x1, inception_5a_relu_3x3, inception_5a_relu_5x5, inception_5a_relu_pool_proj), 1)
        # inception_5b_1x1 = self.inception_5b_1x1(inception_5a_output)
        # inception_5b_3x3_reduce = self.inception_5b_3x3_reduce(inception_5a_output)
        # inception_5b_5x5_reduce = self.inception_5b_5x5_reduce(inception_5a_output)
        # inception_5b_pool_pad = F.pad(inception_5a_output, (1, 1, 1, 1), value=float('-inf'))
        # inception_5b_pool, inception_5b_pool_idx = F.max_pool2d(inception_5b_pool_pad, kernel_size=(3, 3), stride=(1, 1), padding=0, ceil_mode=False, return_indices=True)
        # inception_5b_relu_1x1 = F.relu(inception_5b_1x1)
        # inception_5b_relu_3x3_reduce = F.relu(inception_5b_3x3_reduce)
        # inception_5b_relu_5x5_reduce = F.relu(inception_5b_5x5_reduce)
        # inception_5b_pool_proj = self.inception_5b_pool_proj(inception_5b_pool)
        # inception_5b_3x3_pad = F.pad(inception_5b_relu_3x3_reduce, (1, 1, 1, 1))
        # inception_5b_3x3 = self.inception_5b_3x3(inception_5b_3x3_pad)
        # inception_5b_5x5_pad = F.pad(inception_5b_relu_5x5_reduce, (2, 2, 2, 2))
        # inception_5b_5x5 = self.inception_5b_5x5(inception_5b_5x5_pad)
        # inception_5b_relu_pool_proj = F.relu(inception_5b_pool_proj)
        # inception_5b_relu_3x3 = F.relu(inception_5b_3x3)
        # inception_5b_relu_5x5 = F.relu(inception_5b_5x5)
        # inception_5b_output = torch.cat((inception_5b_relu_1x1, inception_5b_relu_3x3, inception_5b_relu_5x5, inception_5b_relu_pool_proj), 1)
        # pool5_7x7_s1    = F.avg_pool2d(inception_5b_output, kernel_size=(7, 7), stride=(1, 1), padding=(0,), ceil_mode=False, count_include_pad=False)
        # pool5_drop_7x7_s1 = F.dropout(input = pool5_7x7_s1, p = 0.4000000059604645, training = self.training, inplace = True)
        # loss3_classifier_0 = pool5_drop_7x7_s1.view(pool5_drop_7x7_s1.size(0), -1)
        # loss3_classifier_1 = self.loss3_classifier_1(loss3_classifier_0)
        # prob            = F.softmax(loss3_classifier_1)
        # return prob
        return inception_3a_output

    # @staticmethod
    def __conv(self, dim, name, **kwargs):
        if   dim == 1:  layer = nn.Conv1d(**kwargs)
        elif dim == 2:  layer = nn.Conv2d(**kwargs)
        elif dim == 3:  layer = nn.Conv3d(**kwargs)
        else:           raise NotImplementedError()

        layer.state_dict()['weight'].copy_(torch.from_numpy(self.weights_dict[name]['weights']))
        if 'bias' in self.weights_dict[name]:
            layer.state_dict()['bias'].copy_(torch.from_numpy(self.weights_dict[name]['bias'].reshape(layer.state_dict()['bias'].shape[0])))
        return layer

    # @staticmethod
    def __dense(self, name, **kwargs):
        layer = nn.Linear(**kwargs)
        layer.state_dict()['weight'].copy_(torch.from_numpy(self.weights_dict[name]['weights']))
        if 'bias' in self.weights_dict[name]:
            layer.state_dict()['bias'].copy_(torch.from_numpy(self.weights_dict[name]['bias']))
        return layer


